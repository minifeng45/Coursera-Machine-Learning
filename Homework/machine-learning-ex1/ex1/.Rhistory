c<-theta.layout[,2]
c
c^2
m<-theta.layout[,1]
c<-theta.layout[,2]
Y2<-sum(y^2)
X2<-sum(x^2)
XY<-sum(x*y)
X<-sum(x)
Y<-sum(y)
loss<-Y2+X2*m^2+c^2*length(y)+2*XY*m+2*Y*c-2*X*m*c
f <- function(m, c) {Y2+X2*m^2+c^2*length(y)+2*XY*m+2*Y*c-2*X*m*c}
z <- outer(m, c, f)
persp(m, c, z, phi = 30, theta = 30,col = "orange",xlab = "m (Slope of the Line)",ylab = "c (Intercept on the Y-axis)",zlab = "Loss Function")
length(theta.layout[,2]
)
volcano
?persp
x = theta.layout[,2]
y = theta.layout[,1]
f<-function(u,v){
u*u*exp(2*v)+4*v*v*exp(-2*u)-4*u*v*exp(v-u)
}
x = theta.layout[,2]
y = theta.layout[,1]
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 25, theta = 55, xlim=c(-2,2), ylim=c(-2,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
y
x
rev(theta.layout[,1])
x = theta.layout[,2]
y = rev(theta.layout[,1])
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 25, theta = 55, xlim=c(-2,2), ylim=c(-2,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
theta.layout[,2]
order( theta.layout[,2])
x = seq(-2, 2, by = 0.5)
y = seq(-2, 2, by = 0.5)
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 25, theta = 55, xlim=c(-2,2), ylim=c(-2,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
gdec.eta1
ggplot(data,aes(x = x,y= y))+
geom_point()+
title("MarkerSize")+
### gradient descent
gradientR<-function(y, X, epsilon,eta, iters){
epsilon = 0.0001
X = as.matrix(data.frame(rep(1,length(y)),X))
N= dim(X)[1]
print("Initialize parameters...")
theta.init = as.matrix(rnorm(n=dim(X)[2], mean=0,sd = 1)) # Initialize theta
theta.init = t(theta.init)
e = t(y) - theta.init%*%t(X)
grad.init = -(2/N)%*%(e)%*%X
theta = theta.init - eta*(1/N)*grad.init
print(theta)
l2loss = c()
theta.iter = c()
for(i in 1:iters){
l2loss = c(l2loss,sqrt(sum((t(y) - theta%*%t(X))^2)))
e = t(y) - theta%*%t(X)
grad = -(2/N)%*%e%*%X
theta = theta - eta*(2/N)*grad
theta.iter = rbind(theta.iter,c(theta[,1],theta[,2],i))
if(sqrt(sum(grad^2)) <= epsilon){
break
}
}
print("Algorithm converged")
print(paste("Final gradient norm is",sqrt(sum(grad^2))))
values<-list("coef" = t(theta), "l2loss" = l2loss)
return(values)
}
gdec.eta1 = gradientR(y = y, X = x, eta = 0.01, iters = 1500)
#Persp plot
persp(x, y, z, phi = -0.4738163, theta = 0.06170985, xlim=c(-2,2), ylim=c(-2,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
persp(x, y, z, phi = 0.06170985, theta = -0.4738163, xlim=c(-2,2), ylim=c(-2,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
?oute
outer
?outer
x = data[,1]
y = data[,2]
x
y
x
x = sort(theta.layout[,1])
y = sort(theta.layout[,2])
x
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 0.06170985, theta = -0.4738163, xlim=c(-2,2), ylim=c(-2,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
length(theta.layout)
f<-function(u,v){
u*u*exp(2*v)+4*v*v*exp(-2*u)-4*u*v*exp(v-u)
}
x = sort(theta.layout[,1])
y = sort(theta.layout[,2])
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 25, theta = 55,
xlim=c(sort(theta.layout[1,1]),
sort(theta.layout[1500,1])),
ylim=c(sort(theta.layout[1,2]),
sort(theta.layout[1500,2])),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
sort(theta.layout[1500,1]
)
x
class(x)
?persp
f<-function(u,v){
u*u*exp(2*v)+4*v*v*exp(-2*u)-4*u*v*exp(v-u)
}
x = sort(theta.layout[,1])
y = sort(theta.layout[,2])
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 25, theta = 55,
xlim=c(sort(as.numeric(theta.layout[1,1])),
sort(as.numeric(theta.layout[1500,1]))),
ylim=c(sort(as.numeric(theta.layout[1,2])),
sort(as.numeric(theta.layout[1500,2]))),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
sort(theta.layout[1500,2])
sort(theta.layout[1,2])
x = sort(theta.layout[1,1])
sort(theta.layout[1,1])
sort(theta.layout[1500,1])
f<-function(u,v){
u*u*exp(2*v)+4*v*v*exp(-2*u)-4*u*v*exp(v-u)
}
x = sort(theta.layout[,1])
y = sort(theta.layout[,2])
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 25, theta = 55,
xlim=c(0,1)
ylim=c(-1,2)
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
#Persp plot
persp(x, y, z, phi = 25, theta = 55,
xlim=c(0,1),
ylim=c(-1,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
res
f<-function(u,v){
u*u*exp(2*v)+4*v*v*exp(-2*u)-4*u*v*exp(v-u)
}
x = sort(theta.layout[,1])
y = sort(theta.layout[,2])
z <- outer(x,y,f)
#Contour plot
contour(x,y,z)
#Persp plot
persp(x, y, z, phi = 25, theta = 55,
xlim=c(0,1),
ylim=c(0.5,2),
xlab = "U", ylab = "V",
main = "F(u,v)", col="yellow", ticktype = "detailed"
) -> res
theta.layout = gradientR(y = y, X = x, eta = 0.01, iters = 1500)
data2 = read.delim("ex1data2.txt",header = F,sep = ",")
data2
data %>%
summarise(mean1 = mean(V1),
mean2 = mean(V2),
mean3 = mean(V3))
library(dplyr)
data %>%
summarise(mean1 = mean(V1),
mean2 = mean(V2),
mean3 = mean(V3))
data2 %>%
summarise(mean1 = mean(V1),
mean2 = mean(V2),
mean3 = mean(V3))
data2 %>%
summarise(mean1 = mean(V1),
mean2 = mean(V2),
mean3 = mean(V3),
sd1 = sd(V1),
sd2 = sd(V2),
sd3 = sd(V3))
data2
data2[,c(1:2)]
X = as.matrix(data.frame(rep(1,length(data[,1])),data[,c(1:2)]))
x
X
data2[,3]
y = data2[,3]
eta = c(0.3,0.1,0.03,0.01)
gdec.eta3 = gradientR(y = y, X = x, eta = eta[1], iters = 5500)
x = data[,1]
x
x
data[,c(1:2)]
data2[,c(1:2)]
as.matrix(data2[,c(1:2)])
X = as.matrix(data2[,c(1:2)])
y = data2[,3]
eta = c(0.3,0.1,0.03,0.01)
gdec.eta3 = gradientR(y = y, X = x, eta = eta[1], iters = 5500)
length()
length(data2[,3])
length(X)
as.matrix(data2[,c(1:2)])
X = data2[,c(1:2)]
y = data2[,3]
eta = c(0.3,0.1,0.03,0.01)
gdec.eta3 = gradientR(y = y, X = x, eta = eta[1], iters = 5500)
X = dataframe(data2[,1],data2[,2])
X = data.frame(data2[,1],data2[,2])
y = data2[,3]
gdec.eta3 = gradientR(y = y, X = x, eta = eta[1], iters = 5500)
X = data.frame(data2[,1],data2[,2])
y = data2[,3]
eta = c(0.3,0.1,0.03,0.01)
gdec.eta3 = gradientR(y = y, X = X, eta = eta[1], iters = 5500)
gdec.eta3 = gradientR(y = y, X = X, eta = eta[1], iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = eta[2], iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = eta[3], iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = eta[4], iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
plot(1:length(gdec.eta1$l2loss),gdec.eta1$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3
ggplot(data,aes(x = x,y= y))+
geom_point()+
title("MarkerSize")+
### gradient descent
gradientR<-function(y, X, epsilon,eta, iters){
epsilon = 0.0001
X = as.matrix(data.frame(rep(1,length(y)),X))
N= dim(X)[1]
print("Initialize parameters...")
theta.init = as.matrix(rnorm(n=dim(X)[2], mean=0,sd = 1)) # Initialize theta
theta.init = t(theta.init)
e = t(y) - theta.init%*%t(X)
grad.init = -(2/N)%*%(e)%*%X
theta = theta.init - eta*(1/N)*grad.init
print(theta)
l2loss = c()
theta.iter = c()
for(i in 1:iters){
l2loss = c(l2loss,sqrt(sum((t(y) - theta%*%t(X))^2)))
e = t(y) - theta%*%t(X)
grad = -(2/N)%*%e%*%X
theta = theta - eta*(2/N)*grad
theta.iter = rbind(theta.iter,c(theta[,1],theta[,2],i))
if(sqrt(sum(grad^2)) <= epsilon){
break
}
}
print("Algorithm converged")
print(paste("Final gradient norm is",sqrt(sum(grad^2))))
values<-list("coef" = t(theta), "l2loss" = l2loss)
return(values)
}
ggplot(data,aes(x = x,y= y))+
geom_point()+
title("MarkerSize")+
### gradient descent
gradientR<-function(y, X, epsilon,eta, iters){
epsilon = 0.0001
X = as.matrix(data.frame(rep(1,length(y)),X))
N= dim(X)[1]
print("Initialize parameters...")
theta.init = as.matrix(rnorm(n=dim(X)[2], mean=0,sd = 1)) # Initialize theta
theta.init = t(theta.init)
e = t(y) - theta.init%*%t(X)
grad.init = -(2/N)%*%(e)%*%X
theta = theta.init - eta*(1/N)*grad.init
print(theta)
l2loss = c()
theta.iter = c()
for(i in 1:iters){
l2loss = c(l2loss,sqrt(sum((t(y) - theta%*%t(X))^2)))
e = t(y) - theta%*%t(X)
grad = -(2/N)%*%e%*%X
theta = theta - eta*(2/N)*grad
theta.iter = rbind(theta.iter,c(theta[,1],theta[,2],i))
if(sqrt(sum(grad^2)) <= epsilon){
break
}
}
print("Algorithm converged")
print(paste("Final gradient norm is",sqrt(sum(grad^2))))
values<-list("coef" = t(theta), "l2loss" = l2loss)
return(values)
}
### gradient descent
gradientR<-function(y, X, epsilon,eta, iters){
epsilon = 0.0001
X = as.matrix(data.frame(rep(1,length(y)),X))
N= dim(X)[1]
print("Initialize parameters...")
theta.init = as.matrix(rnorm(n=dim(X)[2], mean=0,sd = 1)) # Initialize theta
theta.init = t(theta.init)
e = t(y) - theta.init%*%t(X)
grad.init = -(2/N)%*%(e)%*%X
theta = theta.init - eta*(1/N)*grad.init
print(theta)
l2loss = c()
theta.iter = c()
for(i in 1:iters){
l2loss = c(l2loss,sqrt(sum((t(y) - theta%*%t(X))^2)))
e = t(y) - theta%*%t(X)
grad = -(2/N)%*%e%*%X
theta = theta - eta*(2/N)*grad
theta.iter = rbind(theta.iter,c(theta[,1],theta[,2],i))
if(sqrt(sum(grad^2)) <= epsilon){
break
}
}
print("Algorithm converged")
print(paste("Final gradient norm is",sqrt(sum(grad^2))))
values<-list("coef" = t(theta), "l2loss" = l2loss)
return(values)
}
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
X = data.frame(data2[,1],data2[,2])
y = data2[,3]
eta = c(0.3,0.1,0.03,0.01)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.01, iters = 500)
gdec.eta3
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000001, iters = 500)
gdec.eta3
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000005, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000009, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000008, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
lines(1:length(gdec.eta1$l2loss),gdec.eta1$l2loss)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000007, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000006, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000005, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000004, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000003, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000002, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.000001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0000009, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0000008, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0000007, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0000003, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00000001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.1, iters = 500)
X
gdec.eta3 = gradientR(y = y, X = X, eta = 0.003, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0003, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0001, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00003, iters = 500)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
X
data2 %>%
data2 %>%
summarise(mean1 = mean(V1),
mean2 = mean(V2),
mean3 = mean(V3),
sd1 = sd(V1),
sd2 = sd(V2),
sd3 = sd(V3))
piv = data2 %>%
summarise(mean1 = mean(V1),
mean2 = mean(V2),
mean3 = mean(V3),
sd1 = sd(V1),
sd2 = sd(V2),
sd3 = sd(V3))
X = data.frame((data2[,1]-20000)/794.7,(data2[,2]-3.17)/0.76)
y = (data2[,3]-340412)/125039.9
v
X
X = data.frame((data2[,1]-2000)/794.7,(data2[,2]-3.17)/0.76)
y = (data2[,3]-340412)/125039.9
X
eta = c(0.3,0.1,0.03,0.01)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00001, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.001, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.01, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.1, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.5, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.7, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.9, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 1.1, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.3, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.09, iters = 500)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.09, iters = 50)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 0.9, iters = 50)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 1.5, iters = 50)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
gdec.eta3 = gradientR(y = y, X = X, eta = 2, iters = 50)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
lines(1:length(gdec.eta1$l2loss),gdec.eta1$l2loss)
lines(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss)
gdec.eta3
#### 3.3 Normal Equations ####
as.matrix(data.frame(rep(1,length(y)),X))
#### 3.3 Normal Equations ####
X = data.frame(data2[,1],data2[,2]) #with normalization
y = data2[,3]
as.matrix(data.frame(rep(1,length(y)),X))
inv(t(X) %*% X) %*% t(X) %*% y
?inv
??inv
solve(t(X) %*% X) %*% t(X) %*% y
t(X)
#### 3.3 Normal Equations ####
X = data.frame(data2[,1],data2[,2]) #with normalization
y = data2[,3]
X  = as.matrix(data.frame(rep(1,length(y)),X))
solve(t(X) %*% X) %*% t(X) %*% y
gdec.eta3
gdec.eta3$coef
gdec.eta3$coef[1]
solve(t(X) %*% X) %*% t(X) %*% y
gdec.eta3$coef[2] *0.76  +3.17
gdec.eta3$coef[2] *794.7  +2000
X = data.frame((data2[,1]-2000),(data2[,2]-3.17)) #with normalization
y = (data2[,3]-340412) #with normalization
gdec.eta3 = gradientR(y = y, X = X, eta = 2, iters = 50)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.2, iters = 50)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.02, iters = 50)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.002, iters = 50)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.0002, iters = 50)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00002, iters = 50)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00002, iters = 5000)
gdec.eta3 = gradientR(y = y, X = X, eta = 0.00002, iters = 5000000)
X = data.frame((data2[,1]-2000)/794.7,(data2[,2]-3.17)/0.76) #with normalization
y = (data2[,3]-340412)/125039.9 #with normalization
eta = c(0.3,0.1,0.03,0.01)
gdec.eta3 = gradientR(y = y, X = X, eta = 2, iters = 50)
plot(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss,xlab = "Epoch", ylab = "L2-loss",color = "green")
lines(1:length(gdec.eta3$l2loss),gdec.eta3$l2loss)
gdec.eta3$coef
X = data.frame(data2[,1]-2000)/794.7,data2[,2]-3.17)/0.76) #with normalization
X = data.frame(data2[,1]-2000)/794.7,(data2[,2]-3.17)/0.76) #with normalization
X = data.frame(data2[,1]-2000)/794.7,(data2[,2]-3.17)/0.76)) #with normalization
X = data.frame((data2[,1]-2000)/794.7,(data2[,2]-3.17)/0.76)) #with normalization
X = data.frame((data2[,1]-2000)/794.7,(data2[,2]-3.17)/0.76) #with normalization
y = (data2[,3]-340412)/125039.9
X  = as.matrix(data.frame(rep(1,length(y)),X))
solve(t(X) %*% X) %*% t(X) %*% y
